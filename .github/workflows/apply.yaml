name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    env:
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
      TF_VAR_dragonfly_secret: ${{ secrets.DRAGONFLY_SECRET }}
      TF_VAR_firefly_secret: ${{ secrets.FIREFLY_SECRET }}
      TF_VAR_droplet_image: ${{ vars.DROPLET_IMAGE }}
      TF_VAR_droplet_name: ${{ vars.DROPLET_NAME }}
      TF_VAR_droplet_region: ${{ vars.DROPLET_REGION }}
      TF_VAR_droplet_size: ${{ vars.DROPLET_SIZE }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_node_version: ${{ vars.NODE_VERSION }}
      TF_VAR_dragonfly_repo: ${{ vars.DRAGONFLY_REPO }}
      TF_VAR_dragonfly_port: ${{ vars.DRAGONFLY_PORT }}
      TF_VAR_dragonfly_domain: ${{ vars.DRAGONFLY_DOMAIN }}
      TF_VAR_dragonfly_branch: ${{ vars.DRAGONFLY_BRANCH }}
      TF_VAR_firefly_repo: ${{ vars.FIREFLY_REPO }}
      TF_VAR_firefly_port: ${{ vars.FIREFLY_PORT }}
      TF_VAR_firefly_domain: ${{ vars.FIREFLY_DOMAIN }}
      TF_VAR_firefly_branch: ${{ vars.FIREFLY_BRANCH }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
