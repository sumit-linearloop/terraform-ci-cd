name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main  # Runs on push to 'main'
  workflow_dispatch:  # Enables manual trigger
    inputs:
      action:  # Input to choose between apply or destroy
        description: "Select the Terraform action to perform"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download terraform.tfvars from S3
        run: |
          aws s3 cp s3://sumit-cli/terraform.tfvars ./terraform.tfvars || { 
            echo "Failed to download terraform.tfvars"; 
            exit 1; 
          }

      - name: Terraform Init
        run: |
          terraform init || { echo "Terraform init failed"; exit 1; }

      - name: Terraform ${ { github.event.inputs.action } }  # Dynamically choose apply or destroy
        env:
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -var="app_action=setup_dragonfly" -var="ssh_public_key=${SSH_PUBLIC_KEY}" -var="ssh_private_key=${SSH_PRIVATE_KEY}" -auto-approve || { 
              echo "Terraform apply failed"; 
              exit 1; 
            }
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform apply -var="app_action=destroy_dragonfly" -var="ssh_public_key=${SSH_PUBLIC_KEY}" -var="ssh_private_key=${SSH_PRIVATE_KEY}" -auto-approve || { 
              echo "Terraform destroy failed"; 
              exit 1; 
            }
          fi

      # Step to build and start the application using PM2
      - name: Build and Start Application
        run: |
          # Install Node.js and PM2
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          nvm install 18  # Install Node.js (choose your version)
          nvm use 18
          
          # Clone the application repository if not already present
          if [ ! -d "/var/www/dragonfly" ]; then
            git clone -b main <YOUR_REPOSITORY_URL> /var/www/dragonfly
          fi

          cd /var/www/dragonfly
          git pull origin main  # Pull the latest changes from main

          # Install dependencies
          yarn install || { echo "Yarn install failed"; exit 1; }

          # Build the project
          yarn build || { echo "Build failed"; exit 1; }

          # Start the application with PM2
          pm2 start dist/main.js --name "dragonfly" -i 1 || { echo "PM2 start failed"; exit 1; }
          pm2 save || { echo "PM2 save failed"; exit 1; }

          echo "Application started successfully!"
